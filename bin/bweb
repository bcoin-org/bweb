#!/usr/bin/env node

/*!
 * bweb - file server for node.js
 * Copyright (c) 2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bweb
 */

'use strict';

const assert = require('bsert');
const os = require('os');
const {resolve} = require('path');
const bweb = require('../');
const {argv, stdout, stderr, exit} = process;

/*
 * Constants
 */

const VERSION = '0.1.12';

const HELP = `
  Usage: bweb [options] [file]

  Options:

    -v, --version            output the version number
    -h, --help               output usage information
    -H, --host <host>        set hostname
    -p, --port <port>        set port
    -s, --ssl                set ssl
    -k, --key <file>         set key file
    -c, --cert <file>        set cert file
    -a, --auth <user:pass>   set basic auth
    -j, --jail               jail server
`;

/*
 * Helpers
 */

function getArgs(argv) {
  assert(Array.isArray(argv));

  const args = [];

  for (let i = 0; i < argv.length; i++) {
    const arg = argv[i];

    assert(typeof arg === 'string');

    if (arg.startsWith('--')) {
      // e.g. --opt
      const index = arg.indexOf('=');
      if (index !== -1) {
        // e.g. --opt=val
        args.push(arg.substring(0, index));
        args.push(arg.substring(index + 1));
      } else {
        args.push(arg);
      }
    } else if (arg.startsWith('-')) {
      if (arg.length > 2) {
        // e.g. -abc
        for (let j = 1; j < arg.length; j++)
          args.push(`-${arg.charAt(j)}`);
      } else {
        // e.g. -a
        args.push(arg);
      }
    } else {
      // e.g. foo
      args.push(arg);
    }
  }

  return args;
}

function parseArgs() {
  const options = {
    __proto__: null,
    server: {
      __proto__: null,
      host: 'localhost',
      port: 8080,
      ssl: false,
      keyFile: null,
      certFile: null,
      sockets: false
    },
    auth: {
      __proto__: null,
      username: 'admin',
      password: null
    },
    file: {
      __proto__: null,
      prefix: resolve('.'),
      useIndex: true,
      jail: false
    }
  };

  const args = getArgs(argv);

  for (let i = 2; i < args.length; i++) {
    const arg = args[i];

    let next = '';

    if (i + 1 < args.length)
      next = args[i + 1];

    switch (arg) {
      case '-v':
      case '--version': {
        stdout.write(VERSION + '\n');
        exit(0);
        break;
      }

      case '-h':
      case '--help': {
        stdout.write(HELP + '\n');
        exit(0);
        break;
      }

      case '-H':
      case '--host': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.server.host = next;

        i += 1;

        break;
      }

      case '-p':
      case '--port': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.server.port = next | 0;

        i += 1;

        break;
      }

      case '-s':
      case '--ssl': {
        options.server.ssl = true;
        break;
      }

      case '-k':
      case '--key': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.server.key = next;

        i += 1;

        break;
      }

      case '-c':
      case '--cert': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.server.cert = next;

        i += 1;

        break;
      }

      case '-a':
      case '--auth': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        const parts = next.split(':');

        if (parts.length === 1) {
          options.auth.password = parts[0];
        } else if (parts.length === 2) {
          options.auth.username = parts[0] || 'admin';
          options.auth.password = parts[1];
        } else {
          throw new Error(`Invalid option for: ${arg}.`);
        }

        i += 1;

        break;
      }

      case '-j':
      case '--jail': {
        options.file.jail = true;
        break;
      }

      default: {
        if (arg.length === 0 || arg[0] === '-')
          throw new Error(`Invalid argument: ${arg}.`);

        options.file.prefix = resolve(arg);

        break;
      }
    }
  }

  return options;
}

function getInterfaces() {
  const interfaces = os.networkInterfaces();
  const ipv4 = [];
  const ipv6 = [];

  for (const key of Object.keys(interfaces)) {
    const items = interfaces[key];

    for (const details of items) {
      if (details.internal)
        continue;

      if (details.family === 'IPv4') {
        ipv4.push(details.address);
        continue;
      }

      if (details.family === 'IPv6') {
        ipv6.push(details.address);
        continue;
      }
    }
  }

  return [ipv4, ipv6];
}

function printInterfaces() {
  const [ipv4, ipv6] = getInterfaces();

  if (ipv4.length > 0) {
    console.log('  IPv4: %s', ipv4[0]);

    for (let i = 1; i < ipv4.length; i++)
      console.log('        %s', ipv4[i]);
  }

  if (ipv6.length > 0) {
    console.log('  IPv6: %s', ipv6[0]);

    for (let i = 1; i < ipv6.length; i++)
      console.log('        %s', ipv6[i]);
  }
}

(async () => {
  let options;

  try {
    options = parseArgs();
  } catch (e) {
    stderr.write(e.message + '\n');
    exit(1);
    return;
  }

  const server = bweb.server(options.server);

  if (options.auth.password != null)
    server.use('/', server.basicAuth(options.auth));

  server.use('/', server.fileServer(options.file));

  server.on('error', (err) => {
    stderr.write(err.stack + '\n');
  });

  await server.open();

  console.log('Server listening.');
  console.log('  Host: %s', options.server.host);
  console.log('  Port: %d', options.server.port);

  printInterfaces();
})().catch((err) => {
  stderr.write(err.stack + '\n');
  exit(1);
});
